//[7-24] 다음 중 인터페이스의 장점이 아닌 것은?
//a.	표준화를 가능하게 해준다.
//b.	서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
//c.	독립적인 프로그래밍이 가능하다.
//d.	다중상속을 가능하게 해준다.
//e.	패키지간의 연결을 도와준다.


/*
 * <풀이>
 * 인터페이스의 장점은 
 * 1. 표준화가 가능하다. 일정 규격에 따라 
 * 2. 서로 관계없는 클래스를 묶어줄 수 있다. (예를 들어 Unit에는 공중유닛과 지상유닛이 있지만 이 중 수리가능한 유닛은 별도의 그룹핑이 필요할 수 있다.)
 * 3. 개발 속도가 빨라진다. 독립적인 프로그래밍이 가능하다. (예를 들어 B 인터페이스의 추상메서드가 이미 구현되었다고 가정한 상태에서 한 팀은 A를 개발하는 동시에 다른 팀이 B를 개발)
 * 4. 다중 상속을 가능하게 해준다. extends 클래스는 단일 상속이 원칙이지만 implements는 다중상속이 가능하다.
 * 5. 패키지간의 연결은 불가능하다. 클래스간의 연결이 옳다.
 * 
 * <모범답안>
 * [정답] e
[해설] 인터페이스를 사용하는 이유와 그 장점을 정리해 보면 다음과 같다.

1.	개발시간을 단축시킬 수 있다.
일단 인터페이스가 작성되면, 이를 사용해서 프로그램을 작성하는 것이 가능하다. 메서드를 호출하 는 쪽에서는 메서드의 내용에 관계없이 선언부만 알면 되기 때문이다.
그리고 동시에 다른 한 쪽에서는 인터페이스를 구현하는 클래스를 작성하도록 하여, 인터페이스를 구현하는 클래스가 작성될 때까지 기다리지 않고도 양쪽에서 동시에 개발을 진행할 수 있다.

2.	표준화가 가능하다.
프로젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음, 개발자들에게 인터페이스를 구현하여 프 로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능하다.

3.	서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
서로 상속관계에 있지도 않고, 같은 조상클래스를 가지고 있지 않은 서로 아무런 관계도 없는 클래 스들에게 하나의 인터페이스를 공통적으로 구현하도록 함으로써 관계를 맺어 줄 수 있다.

4.	독립적인 프로그래밍이 가능하다.
인터페이스를 이용하면 클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제구현에 독립적인 프로 그램을 작성하는 것이 가능하다. 클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접 적인 관계로 변경하면, 한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프 로그래밍이 가능하다.

 */