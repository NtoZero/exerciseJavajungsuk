// [7-29] 지역 클래스에서 외부 클래스의 인스턴스 멤버와 static멤버에 모두 접근할 수 있지만, 
// 지역변수는 final이 붙은 상수만 접근할 수 있는 이유 무엇인가?


/*
 * <내 풀이>
 * 내부 지역 클래스에서 외부 클래스의 인스턴스 멤버와 static 멤버 모두에 접근할 수 있는 이유는
 * 내부 지역 클래스의 인스턴스가 생성되었을 시점에는 외부 클래스의 인스턴스가 이미 생성된 시점이기 때문에 자유롭게 참조할 수 있음이다.
 * 또한 static 같은 경우에는 인스턴스 생성 없이도 클래스 로더에 의해 메소드 영역에 저장되는 정보이므로 언제든지 자유롭게 참조가 가능하다.
 * 
 * 그러나 지역변수는 내부 지역 클래스를 포함하는 메서드의 호출이 종료된 시점에 소멸될 수 밖에 없기 때문에
 * 내부 지역 클래스의 작업이 끝나기 전에 변수에 대한 참조값이 변하거나 사라질 수 있다. 
 * 하지만 final이 붙은 상수는 그 값이 상수풀이라는 별도의 공간에 저장되기 때문에 메서드의 소멸과 별개로 활용 가능한 값으로 남는다.
 * 
 * 정리하자면, 외부 클래스의 인스턴스 멤버와 static 멤버는 반드시 내부 지역 클래스 호출 전에 존재해야하는 값이기 때문에 접근 가능하고 (생성시점에 관한 내용)
 * 지역 final 상수는 상수풀이라는 독립적인 공간이 위와 같은 맥락에서 항상 참조할 수 있는 역할을 하기 때문에 가능하다.
 * 
 * 
 * <모범 답안>
 * [정답] 메서드가 수행을 마쳐서 지역변수가 소멸된 시점에도, 지역 클래스의 인스턴스가
소멸된 지역변수를 참조하려는 경우가 발생할 수 있기 때문이다.

[해설] 아직 쓰레드를 배우지 않았지만, 쓰레드를 사용해서 상황을 만들어 보았다.

import java.awt.*; import java.awt.event.*;

class Exercise7_29
{
public static void main(String[] args)
{
final int VALUE = 10; // 외부 클래스의 지역변수

Thread t = new Thread(new Runnable() { // 익명 클래스(내부 클래스) public void run() {
for(int i=0; i < 10;i++) { // 10번 반복한다.
try {
Thread.sleep(1*1000); // 1초간 멈춘다.
} catch(InterruptedException e) {}

System.out.println(VALUE); // 외부 클래스의 지역변수를 사용
}
} // run()
});

t.start(); // 쓰레드를 시작한다. System.out.println("main() - 종료.");
} // main
}

<모범 답안 실행결과>
main() - 종료. 10
10
10
10
10
10
10
10
10
10

실행결과를 보면 main메서드가 종료된 후에도 지역변수 VALUE의 값을 사용하고 있다는 것 을 알 수 있다. 
지역변수는 메서드가 종료되면 함께 사라지지만, 상수의 경우 이미 컨스 턴트 풀(constant pool, 상수를 따로 모아서 저장해 놓는 곳)에 
저장되어 있기 때문에 사 용할 수 있는 것이다.
 */